arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class3a_lag = lag(class3a),  # Valor de la categoría en la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
datos_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class3a) * 100)
View(datos_cambio)
datos_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola)
datos_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>% select(cambio_class3a)
datos_cambio %>%
#  filter(!is.na(cambio_class3a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>% select(cambio_class3a)
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class3a_lag = lag(class3a),  # Valor de la categoría en la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup() %>% select(cambio_class3a)
View(datos_cambio)
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class3a_lag = lag(class3a),  # Valor de la categoría en la ola anterior
cambio_class3a = ifelse(is.na(class3a), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup() %>% select(class3a_lag)
View(datos_cambio)
datos_cambio <- datos %>%
arrange(id, ola) %>%  # Ordenar por individuo y ola
group_by(id) %>%
mutate(class3a = as.character(class3a),         # Convertir a character
class3a_lag = lag(class3a),              # Valor en la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class3a = as.character(class3a),         # Convertir a character
class3a_lag = lag(class3a),              # Valor en la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class3a = as.character(class3a),         # Convertir a character
class3a_lag = lag(class3a),              # Valor en la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,  # NA si no hay ola previa
ifelse(class3a != class3a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup() %>% select(cambio_class3a)
View(datos_cambio)
table(datos_cambio$cambio_class3a, useNA = "ifany")
elsoc_minicoes %>%
group_by(idencuesta, ola) %>%
summarise(n = n()) %>%
filter(n > 1)
library(stringr)
elsoc_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%
group_by(idencuesta) %>%
mutate(class3a = str_trim(as.character(class3a)),  # Eliminar espacios extra
class3a_lag = lag(class3a),                 # Valor de la ola anterior
cambio_class3a = ifelse(is.na(class3a_lag), NA,
ifelse(class3a != class3a_lag, 1, 0))) %>%
ungroup()
table(elsoc_cambio$cambio_class3a, useNA = "ifany")
elsoc_minicoes %>%
group_by(idencuesta) %>%
summarise(num_categorias_distintas = n_distinct(class3a, na.rm = TRUE)) %>%
summarise(sin_cambio = sum(num_categorias_distintas == 1),
con_cambio = sum(num_categorias_distintas > 1))
elsoc_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%
group_by(idencuesta) %>%
mutate(class3a = as.character(class3a),
class3a_lag = lag(class3a),      # Categoría en la ola anterior
ola_lag = lag(ola),              # Ola anterior para verificar continuidad
cambio_class3a = ifelse(is.na(class3a_lag) | (ola - ola_lag != 1), NA,  # Solo comparar si son olas consecutivas
ifelse(class3a != class3a_lag, 1, 0))) %>%
ungroup()
cambio_por_pares_ola <- elsoc_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Solo considerar comparaciones válidas
group_by(ola_lag, ola) %>%          # Agrupar por pares de olas
summarise(porcentaje_cambio = mean(cambio_class3a) * 100,
total_personas = n()) %>%  # También mostramos el total de personas consideradas
arrange(ola_lag)
# Mostrar la tabla
print(cambio_por_pares_ola)
elsoc_minicoes %>%
group_by(ola) %>%
summarise(categorias_distintas = n_distinct(class3a, na.rm = TRUE))
# Ver individuos con al menos dos olas para comparación
ids_con_multiples_olas <- elsoc_minicoes %>%
group_by(idencuesta) %>%
summarise(num_olas = n_distinct(ola)) %>%
filter(num_olas >= 2) %>%
pull(idencuesta)
# Seleccionar un individuo al azar y ver su trayectoria de class3a
elsoc_minicoes %>%
filter(idencuesta == sample(ids_con_multiples_olas, 1)) %>%
arrange(ola) %>%
select(idencuesta, ola, class3a)
# Contar individuos con al menos dos olas con datos no faltantes
ids_con_datos_completos <- elsoc_minicoes %>%
group_by(idencuesta) %>%
summarise(olas_con_datos = sum(!is.na(class3a))) %>%
summarise(con_datos_para_comparar = sum(olas_con_datos >= 2),
sin_datos_suficientes = sum(olas_con_datos < 2))
# Ver el resultado
print(ids_con_datos_completos)
# Filtrar IDs con suficientes datos
ids_validos <- elsoc_minicoes %>%
group_by(idencuesta) %>%
summarise(olas_con_datos = sum(!is.na(class3a))) %>%
filter(olas_con_datos >= 2) %>%
pull(idencuesta)
# Crear la variable de cambio solo para estos individuos
elsoc_cambio <- elsoc_minicoes %>%
filter(idencuesta %in% ids_validos) %>%
arrange(idencuesta, ola) %>%
group_by(idencuesta) %>%
mutate(class3a = as.character(class3a),
class3a_lag = lag(class3a),
ola_lag = lag(ola),
cambio_class3a = ifelse(is.na(class3a_lag) | (ola - ola_lag != 1), NA,
ifelse(class3a != class3a_lag, 1, 0))) %>%
ungroup()
cambio_por_pares_ola <- elsoc_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Solo considerar comparaciones válidas
group_by(ola_lag, ola) %>%
summarise(porcentaje_cambio = mean(cambio_class3a) * 100,
total_personas = n()) %>%
arrange(ola_lag)
# Mostrar la tabla
print(cambio_por_pares_ola)
# Seleccionar múltiples individuos con datos completos
elsoc_cambio %>%
filter(idencuesta %in% sample(ids_validos, 5)) %>%
select(idencuesta, ola, class3a, class3a_lag, cambio_class3a) %>%
arrange(idencuesta, ola)
# Seleccionar múltiples individuos con datos completos
elsoc_cambio %>%
filter(idencuesta %in% sample(ids_validos, 10)) %>%
select(idencuesta, ola, class3a, class3a_lag, cambio_class3a) %>%
arrange(idencuesta, ola)
# Seleccionar múltiples individuos con datos completos
elsoc_cambio %>%
filter(idencuesta %in% sample(ids_validos, 20)) %>%
select(idencuesta, ola, class3a, class3a_lag, cambio_class3a) %>%
arrange(idencuesta, ola)
# Seleccionar múltiples individuos con datos completos
elsoc_cambio %>%
filter(idencuesta %in% sample(ids_validos, 20)) %>%
select(idencuesta, ola, class3a, class3a_lag, cambio_class3a) %>%
arrange(idencuesta, ola)
# Seleccionar múltiples individuos con datos completos
elsoc_cambio %>%
filter(idencuesta %in% sample(ids_validos, 20)) %>%
select(idencuesta, ola, class3a, class3a_lag, cambio_class3a) %>%
arrange(idencuesta, ola)
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
weights = ~ponderador02, #ponderador longitudinal
nest = TRUE,
data = elsoc_minicoes)
#Paso 1
datos.clase <- data.frame((svytable(~class1a + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()
#Paso 1
datos.clase <- data.frame((svytable(~class1a + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()
#Paso 2
etiquetas.clase <- data.frame((svytable(~class1a + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>%
mutate(idencuesta = 1)
datos.clase$class1a <- factor(datos.clase$class1a, levels = rev(levels(datos.clase$class1a)))
etiquetas.clase$class1a <- factor(etiquetas.clase$class1a, levels = rev(levels(etiquetas.clase$class1a)))
colors<- c("#f1eef6ff","#bdc9e1ff","#b3b3b3ff","#74a9cfff","#0570b0ff")
ggplot(datos.clase, aes(x = ola, fill = class1a, stratum = class1a,
alluvium = idencuesta, y = porcentaje))+
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
ylab(label = NULL) +
xlab(label = NULL) +
theme(#legend.position = 'top',
legend.title = element_blank(),
plot.caption = element_text(hjust = 1)) +
#    scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.clase,
aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = rep('white'),
bg.colour='grey30')+
scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))
elsoc_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%
group_by(idencuesta) %>%
mutate(class3a = as.character(class1a),
class3a_lag = lag(class1a),      # Categoría en la ola anterior
ola_lag = lag(ola),              # Ola anterior para verificar continuidad
cambio_class3a = ifelse(is.na(class3a_lag) | (ola - ola_lag != 1), NA,  # Solo comparar si son olas consecutivas
ifelse(class3a != class3a_lag, 1, 0))) %>%
ungroup()
cambio_por_pares_ola <- elsoc_cambio %>%
filter(!is.na(cambio_class3a)) %>%  # Solo considerar comparaciones válidas
group_by(ola_lag, ola) %>%          # Agrupar por pares de olas
summarise(porcentaje_cambio = mean(cambio_class3a) * 100,
total_personas = n()) %>%  # También mostramos el total de personas consideradas
arrange(ola_lag)
# Mostrar la tabla
print(cambio_por_pares_ola)
datos_cambio %>%
#  filter(!is.na(cambio_class3a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>% select(cambio_class3a)
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class1a_lag = lag(class1a),  # Valor de la categoría en la ola anterior
cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
ifelse(class1a != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
# Mostrar la tabla
print(cambio_por_ola)
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class1a_lag = lag(class1a),  # Valor de la categoría en la ola anterior
cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
ifelse(class1a != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class1a_lag = lag(class1a),  # Valor de la categoría en la ola anterior
cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
ifelse(class1a != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
# Mostrar la tabla
print(cambio_por_ola)
pacman::p_load(dplyr, ggplot2, survey, shadowtext, kableExtra)
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Ola", "Porcentaje de Cambio (%)"),  # Nombres de las columnas
caption = "Porcentaje de cambio en la categoría `class1a` entre olas",
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),  # Nombres de las columnas
caption = "Porcentaje de cambio en la categoría `class1a` entre olas",
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
View(cambio_por_ola)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),  # Nombres de las columnas
caption = "Porcentaje de cambio en la categoría `class1a` entre olas",
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
caption = "Porcentaje de cambio en la categoría `class1a` entre olas",
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%  # Encabezado con fondo gris claro
column_spec(2, color = "black", bold = TRUE)  # Resaltar la columna de porcentaje
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
datos <- datos %>%
mutate(class_group = case_when(
class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
TRUE ~ NA_character_  # Mantener NA para valores faltantes
))
datos <- elsoc_minicoes %>%
mutate(class_group = case_when(
class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
TRUE ~ NA_character_  # Mantener NA para valores faltantes
))
elsoc_minicoes <- elsoc_minicoes %>%
mutate(class_group = case_when(
class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
TRUE ~ NA_character_  # Mantener NA para valores faltantes
))
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class1a_lag = lag(class_group),  # Valor de la categoría en la ola anterior
cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
ifelse(class_group != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
#Paso 1
datos.clase <- data.frame((svytable(~class_group + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()
elsoc_minicoes <- elsoc_minicoes %>%
mutate(class_group = case_when(
class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
TRUE ~ NA_character_  # Mantener NA para valores faltantes
))
datos_cambio <- elsoc_minicoes %>%
arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
group_by(idencuesta) %>%
mutate(class1a_lag = lag(class_group),  # Valor de la categoría en la ola anterior
cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
ifelse(class_group != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
ungroup()
# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
group_by(ola) %>%
summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
kable(format = "html",
col.names = c("Years", "Percentage of change (%)"),
align = c("c", "c")) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
position = "center",
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2")
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
weights = ~ponderador02, #ponderador longitudinal
nest = TRUE,
data = elsoc_minicoes)
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
weights = ~ponderador02, #ponderador longitudinal
nest = TRUE,
data = elsoc_minicoes)
#Paso 1
datos.clase <- data.frame((svytable(~class_group + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()
#Paso 2
etiquetas.clase <- data.frame((svytable(~class_group + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>%
mutate(idencuesta = 1)
datos.clase$class_group <- factor(datos.clase$class_group, levels = rev(levels(datos.clase$class_group)))
etiquetas.clase$class_group <- factor(etiquetas.clase$class_group, levels = rev(levels(etiquetas.clase$class_group)))
colors<- c("#f1eef6ff","#bdc9e1ff","#b3b3b3ff","#74a9cfff","#0570b0ff")
ggplot(datos.clase, aes(x = ola, fill = class_group, stratum = class_group,
alluvium = idencuesta, y = porcentaje))+
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
ylab(label = NULL) +
xlab(label = NULL) +
theme(#legend.position = 'top',
legend.title = element_blank(),
plot.caption = element_text(hjust = 1)) +
#    scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.clase,
aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = rep('white'),
bg.colour='grey30')+
scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))
colors<- c("#f1eef6ff","#b3b3b3ff",)
ggplot(datos.clase, aes(x = ola, fill = class_group, stratum = class_group,
alluvium = idencuesta, y = porcentaje))+
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
ylab(label = NULL) +
xlab(label = NULL) +
theme(#legend.position = 'top',
legend.title = element_blank(),
plot.caption = element_text(hjust = 1)) +
scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.clase,
aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = rep('white'),
bg.colour='grey30')+
scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))
colors<- c("#f1eef6ff","#b3b3b3ff")
ggplot(datos.clase, aes(x = ola, fill = class_group, stratum = class_group,
alluvium = idencuesta, y = porcentaje))+
ggalluvial::geom_flow(alpha = .66) +
ggalluvial::geom_stratum(linetype = 0) +
scale_y_continuous(labels = scales::percent) +
ylab(label = NULL) +
xlab(label = NULL) +
theme(#legend.position = 'top',
legend.title = element_blank(),
plot.caption = element_text(hjust = 1)) +
scale_fill_manual(values = colors) +
geom_shadowtext(data = etiquetas.clase,
aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
position = position_stack(vjust = .5),
show.legend = FALSE,
size = 4,
color = rep('white'),
bg.colour='grey30')+
scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))
