# graphs

<div style="text-align: justify">

```{r}
pacman::p_load(dplyr, ggplot2, survey, shadowtext, kableExtra)
load(url("https://github.com/DaniOlivaresCollio/minicoes-huelgas/raw/refs/heads/main/input/data/Protest_Events_Dataset_2008_2020_v01.RData"))
load(url("https://github.com/DaniOlivaresCollio/minicoes-huelgas/raw/refs/heads/main/input/data/elsoc-minicoes.Rdata"))
load(url("https://github.com/DaniOlivaresCollio/minicoes-huelgas/raw/refs/heads/main/input/data/elsoc-minicoes2.Rdata"))
```

## Con 'elsoc_minicoes'

```{r, protest-graph}
data_conflictos <- Protest_dataset_2008_2020 %>% filter(!p5c==7) ## Eliminar tres casos del 2007

# Contar eventos por año en la primera base
conteo_eventos <- data_conflictos %>%
  count(p5c)

# Calcular el porcentaje de respuestas 3-5 en 'marchar' por año en la segunda base
porcentaje_marchar <- elsoc_minicoes %>%
  mutate(marchar_35 = ifelse(marcha %in% 3:5, 1, 0),
         ola = case_when(
           ola == 1 ~ 2016,
           ola == 2 ~ 2017,
           ola == 3 ~ 2018,
           ola == 4 ~ 2019,
           ola == 5 ~ 2021,  # No hay datos de 2020
           ola == 6 ~ 2022,
           ola == 7 ~ 2023,
           TRUE ~ NA_real_  # Para capturar cualquier valor inesperado
         )) %>%
  group_by(ola) %>%
  summarise(porcentaje = mean(marchar_35, na.rm = TRUE) * 100) %>%
  filter(!is.na(ola))  # Elimina valores NA

# Graficar
ggplot() +
  geom_line(data = conteo_eventos, aes(x = as.factor(p5c), y = n, group = 1), 
            color = "black", linewidth = 1) +
  geom_point(data = conteo_eventos, aes(x = as.factor(p5c), y = n), 
             color = "black", size = 3) +
  geom_bar(data = porcentaje_marchar, 
           aes(x = as.factor(ola - 2000), y = porcentaje * 50), 
           stat = "identity", fill = "gray40", alpha = 0.5) +
  geom_text(data = porcentaje_marchar, 
            aes(x = as.factor(ola - 2000), y = porcentaje * 50, 
                label = paste0(round(porcentaje, 1), "%")), 
            vjust = -0.5, size = 3.5, color = "black") +  
  scale_x_discrete(
    limits = as.character(8:23),  
    labels = as.character(2008:2023)
  ) +
  ylim(0, 5000) + 
  labs(x = "Year",
       y = "Number of protest events") +
  theme_minimal() +
  # Secondary axis for the percentage of people attending protests
  scale_y_continuous(sec.axis = sec_axis(~./50, name = "Percentage of people attending marches-demonstrations"))


```

# Cambios de clase

```{r}
sjmisc::frq(elsoc_minicoes$class3a)
```

### Tabla

```{r}
datos_cambio <- elsoc_minicoes %>%
  arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
  group_by(idencuesta) %>%
  mutate(class1a_lag = lag(class1a),  # Valor de la categoría en la ola anterior
         cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
                                 ifelse(class1a != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
  ungroup()

# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
  filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
  group_by(ola) %>%
  summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
  mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
         porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
  kable(format = "html", 
        col.names = c("Years", "Percentage of change (%)"),
        align = c("c", "c")) %>%
  kable_styling(full_width = FALSE, 
                bootstrap_options = c("striped", "hover", "condensed"),
                position = "center",
                font_size = 14) %>%
  row_spec(0, bold = TRUE, background = "#f2f2f2")
```

```{r,echo=FALSE}
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
                          strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
                          weights = ~ponderador02, #ponderador longitudinal
                          nest = TRUE,
                          data = elsoc_minicoes)

#Paso 1
datos.clase <- data.frame((svytable(~class1a + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()

#Paso 2
etiquetas.clase <- data.frame((svytable(~class1a + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>% 
  mutate(idencuesta = 1)
datos.clase$class1a <- factor(datos.clase$class1a, levels = rev(levels(datos.clase$class1a)))
etiquetas.clase$class1a <- factor(etiquetas.clase$class1a, levels = rev(levels(etiquetas.clase$class1a)))
```

```{r alluvial,echo=FALSE}
colors<- c("#f1eef6ff","#bdc9e1ff","#b3b3b3ff","#74a9cfff","#0570b0ff")
ggplot(datos.clase, aes(x = ola, fill = class1a, stratum = class1a,
                             alluvium = idencuesta, y = porcentaje))+
    ggalluvial::geom_flow(alpha = .66) + 
    ggalluvial::geom_stratum(linetype = 0) +
    scale_y_continuous(labels = scales::percent) + 
    ylab(label = NULL) +
    xlab(label = NULL) + 
    theme(#legend.position = 'top',
          legend.title = element_blank(),
          plot.caption = element_text(hjust = 1)) +
#    scale_fill_manual(values = colors) +
    geom_shadowtext(data = etiquetas.clase, 
              aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
              position = position_stack(vjust = .5),
              show.legend = FALSE,
              size = 4,
              color = rep('white'),
              bg.colour='grey30')+
  scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))

```

## Con solo dos clases ('distancias largas')

```{r}
elsoc_minicoes <- elsoc_minicoes %>%
  mutate(class_group = case_when(
    class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
    class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
    TRUE ~ NA_character_  # Mantener NA para valores faltantes
  ))
```

### table

```{r}
datos_cambio <- elsoc_minicoes %>%
  arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
  group_by(idencuesta) %>%
  mutate(class1a_lag = lag(class_group),  # Valor de la categoría en la ola anterior
         cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
                                 ifelse(class_group != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
  ungroup()

# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
  filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
  group_by(ola) %>%
  summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
  mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
         porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
  kable(format = "html", 
        col.names = c("Years", "Percentage of change (%)"),
        align = c("c", "c")) %>%
  kable_styling(full_width = FALSE, 
                bootstrap_options = c("striped", "hover", "condensed"),
                position = "center",
                font_size = 14) %>%
  row_spec(0, bold = TRUE, background = "#f2f2f2")
```

```{r,echo=FALSE}
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
                          strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
                          weights = ~ponderador02, #ponderador longitudinal
                          nest = TRUE,
                          data = elsoc_minicoes)
#Paso 1
datos.clase <- data.frame((svytable(~class_group + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()

#Paso 2
etiquetas.clase <- data.frame((svytable(~class_group + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>% 
  mutate(idencuesta = 1)
datos.clase$class_group <- factor(datos.clase$class_group, levels = rev(levels(datos.clase$class_group)))
etiquetas.clase$class_group <- factor(etiquetas.clase$class_group, levels = rev(levels(etiquetas.clase$class_group)))
```

```{r alluvial-group,echo=FALSE}
colors<- c("#f1eef6ff","#b3b3b3ff")
ggplot(datos.clase, aes(x = ola, fill = class_group, stratum = class_group,
                             alluvium = idencuesta, y = porcentaje))+
    ggalluvial::geom_flow(alpha = .66) + 
    ggalluvial::geom_stratum(linetype = 0) +
    scale_y_continuous(labels = scales::percent) + 
    ylab(label = NULL) +
    xlab(label = NULL) + 
    theme(#legend.position = 'top',
          legend.title = element_blank(),
          plot.caption = element_text(hjust = 1)) +
    scale_fill_manual(values = colors) +
    geom_shadowtext(data = etiquetas.clase, 
              aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
              position = position_stack(vjust = .5),
              show.legend = FALSE,
              size = 4,
              color = rep('white'),
              bg.colour='grey30')+
  scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))

```

## Con 'elsoc_minicoes2'

```{r, protest-graph2}
data_conflictos <- Protest_dataset_2008_2020 %>% filter(!p5c==7) ## Eliminar tres casos del 2007

# Contar eventos por año en la primera base
conteo_eventos <- data_conflictos %>%
  count(p5c)

# Calcular el porcentaje de respuestas 3-5 en 'marchar' por año en la segunda base
porcentaje_marchar <- elsoc_minicoes2 %>%
  mutate(marchar_35 = ifelse(marcha %in% 3:5, 1, 0),
         ola = case_when(
           ola == 1 ~ 2016,
           ola == 2 ~ 2017,
           ola == 3 ~ 2018,
           ola == 4 ~ 2019,
           ola == 5 ~ 2021,  # No hay datos de 2020
           ola == 6 ~ 2022,
           ola == 7 ~ 2023,
           TRUE ~ NA_real_  # Para capturar cualquier valor inesperado
         )) %>%
  group_by(ola) %>%
  summarise(porcentaje = mean(marchar_35, na.rm = TRUE) * 100) %>%
  filter(!is.na(ola))  # Elimina valores NA

# Graficar
ggplot() +
  geom_line(data = conteo_eventos, aes(x = as.factor(p5c), y = n, group = 1), 
            color = "black", linewidth = 1) +
  geom_point(data = conteo_eventos, aes(x = as.factor(p5c), y = n), 
             color = "black", size = 3) +
  geom_bar(data = porcentaje_marchar, 
           aes(x = as.factor(ola - 2000), y = porcentaje * 50), 
           stat = "identity", fill = "gray40", alpha = 0.5) +
  geom_text(data = porcentaje_marchar, 
            aes(x = as.factor(ola - 2000), y = porcentaje * 50, 
                label = paste0(round(porcentaje, 1), "%")), 
            vjust = -0.5, size = 3.5, color = "black") +  
  scale_x_discrete(
    limits = as.character(8:23),  
    labels = as.character(2008:2023)
  ) +
  ylim(0, 5000) + 
  labs(x = "Year",
       y = "Number of protest events") +
  theme_minimal() +
  # Secondary axis for the percentage of people attending protests
  scale_y_continuous(sec.axis = sec_axis(~./50, name = "Percentage of people attending protests"))


```

# Cambios de clase

```{r}
sjmisc::frq(elsoc_minicoes2$class1a)
```

### Tabla

```{r}
datos_cambio <- elsoc_minicoes2 %>%
  arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
  group_by(idencuesta) %>%
  mutate(class1a_lag = lag(class1a),  # Valor de la categoría en la ola anterior
         cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
                                 ifelse(class1a != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
  ungroup()

# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
  filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
  group_by(ola) %>%
  summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
  mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
         porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
  kable(format = "html", 
        col.names = c("Years", "Percentage of change (%)"),
        align = c("c", "c")) %>%
  kable_styling(full_width = FALSE, 
                bootstrap_options = c("striped", "hover", "condensed"),
                position = "center",
                font_size = 14) %>%
  row_spec(0, bold = TRUE, background = "#f2f2f2")
```

```{r,echo=FALSE}
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
                          strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
                          weights = ~ponderador02, #ponderador longitudinal
                          nest = TRUE,
                          data = elsoc_minicoes2)

#Paso 1
datos.clase <- data.frame((svytable(~class1a + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()

#Paso 2
etiquetas.clase <- data.frame((svytable(~class1a + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>% 
  mutate(idencuesta = 1)
datos.clase$class1a <- factor(datos.clase$class1a, levels = rev(levels(datos.clase$class1a)))
etiquetas.clase$class1a <- factor(etiquetas.clase$class1a, levels = rev(levels(etiquetas.clase$class1a)))
```

```{r alluvial2,echo=FALSE}
colors<- c("#f1eef6ff","#bdc9e1ff","#b3b3b3ff","#74a9cfff","#0570b0ff")
ggplot(datos.clase, aes(x = ola, fill = class1a, stratum = class1a,
                             alluvium = idencuesta, y = porcentaje))+
    ggalluvial::geom_flow(alpha = .66) + 
    ggalluvial::geom_stratum(linetype = 0) +
    scale_y_continuous(labels = scales::percent) + 
    ylab(label = NULL) +
    xlab(label = NULL) + 
    theme(#legend.position = 'top',
          legend.title = element_blank(),
          plot.caption = element_text(hjust = 1)) +
#    scale_fill_manual(values = colors) +
    geom_shadowtext(data = etiquetas.clase, 
              aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
              position = position_stack(vjust = .5),
              show.legend = FALSE,
              size = 4,
              color = rep('white'),
              bg.colour='grey30')+
  scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))

```

## Con solo dos clases ('distancias largas')

```{r}
elsoc_minicoes2 <- elsoc_minicoes2 %>%
  mutate(class_group = case_when(
    class1a %in% c("Expert managers", "Petit bourgeoisie", "Experts") ~ "privileged",
    class1a %in% c("Workers", "Supervisors", "Informal") ~ "unprivileged",
    TRUE ~ NA_character_  # Mantener NA para valores faltantes
  ))
```

### table

```{r}
datos_cambio <- elsoc_minicoes2 %>%
  arrange(idencuesta, ola) %>%  # Ordenar por individuo y ola
  group_by(idencuesta) %>%
  mutate(class1a_lag = lag(class_group),  # Valor de la categoría en la ola anterior
         cambio_class1a = ifelse(is.na(class1a_lag), NA,  # NA si no hay ola previa
                                 ifelse(class_group != class1a_lag, 1, 0))) %>%  # 1 si cambia, 0 si no
  ungroup()

# Calcular el porcentaje de cambio entre cada par de olas
cambio_por_ola <- datos_cambio %>%
  filter(!is.na(cambio_class1a)) %>%  # Excluir los NA (primeras observaciones)
  group_by(ola) %>%
  summarise(porcentaje_cambio = mean(cambio_class1a) * 100)
cambio_por_ola$ola <- c("2016-2017", "2017-2018", "2018-2019", "2019-2021", "2021-2022", "2022-2023")
# Crear la tabla
cambio_por_ola %>%
  mutate(ola = as.character(ola),  # Aseguramos que la ola se vea como texto
         porcentaje_cambio = round(porcentaje_cambio, 2)) %>%  # Redondear a 2 decimales
  kable(format = "html", 
        col.names = c("Years", "Percentage of change (%)"),
        align = c("c", "c")) %>%
  kable_styling(full_width = FALSE, 
                bootstrap_options = c("striped", "hover", "condensed"),
                position = "center",
                font_size = 14) %>%
  row_spec(0, bold = TRUE, background = "#f2f2f2")
```

```{r,echo=FALSE}
elsoc_diseno <- svydesign(ids = ~segmento_disenno, #muestreo por conglomerado a nivel de manzanas (segmento)
                          strata = ~estrato_disenno, #muestreo estratificado a nivel ciudad (estato)
                          weights = ~ponderador02, #ponderador longitudinal
                          nest = TRUE,
                          data = elsoc_minicoes2)
#Paso 1
datos.clase <- data.frame((svytable(~class_group + ola + idencuesta, elsoc_diseno, round = F))) %>% dplyr::filter(Freq>0)  %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit()

#Paso 2
etiquetas.clase <- data.frame((svytable(~class_group + ola, elsoc_diseno, round = F))) %>% group_by(ola) %>% mutate(porcentaje=Freq/sum(Freq)) %>% na.omit() %>% 
  mutate(idencuesta = 1)
datos.clase$class_group <- factor(datos.clase$class_group, levels = rev(levels(datos.clase$class_group)))
etiquetas.clase$class_group <- factor(etiquetas.clase$class_group, levels = rev(levels(etiquetas.clase$class_group)))
```

```{r alluvial-group2,echo=FALSE}
colors<- c("#f1eef6ff","#b3b3b3ff")
ggplot(datos.clase, aes(x = ola, fill = class_group, stratum = class_group,
                             alluvium = idencuesta, y = porcentaje))+
    ggalluvial::geom_flow(alpha = .66) + 
    ggalluvial::geom_stratum(linetype = 0) +
    scale_y_continuous(labels = scales::percent) + 
    ylab(label = NULL) +
    xlab(label = NULL) + 
    theme(#legend.position = 'top',
          legend.title = element_blank(),
          plot.caption = element_text(hjust = 1)) +
    scale_fill_manual(values = colors) +
    geom_shadowtext(data = etiquetas.clase, 
              aes(label = ifelse(porcentaje > 0 , scales::percent(porcentaje, accuracy = .1),"")),
              position = position_stack(vjust = .5),
              show.legend = FALSE,
              size = 4,
              color = rep('white'),
              bg.colour='grey30')+
  scale_x_discrete(labels = c(2016, 2017, 2018, 2019, 2021, 2022, 2023))

```

# Justificación y percepción de desigualdad en ISSP

```{r}
pacman::p_load(dplyr, haven, stargazer, sjmisc, sjPlot, sjlabelled, tidyverse, summarytools, srvyr)

load(url("https://github.com/justicia-distributiva/brechas-genero/raw/refs/heads/main/input/proc/inter_2019.RData"))

```

## Ponderadores

```{r}
inter_2019 <- inter_2019 %>% mutate_at(vars(starts_with(c("v", "brecha"))), ~(as.numeric(.))) 

inter_2019_exp <- inter_2019 %>% as_survey_design(ids = 1,
                                                      weights = WEIGHT)
```

```{r}
brecha_pais_2019 <- inter_2019_exp %>% filter(!is.na(sex)) %>% 
  group_by(pais) %>%
  summarise(brecha_perc_2019 = survey_median(brecha_perc_2019, na.rm = T),
            brecha_just_2019 = survey_median(brecha_just_2019, na.rm = T)
            ) %>%
  arrange(brecha_perc_2019)

brecha_pais_2019$pais <- factor(brecha_pais_2019$pais, labels = get_labels(inter_2019$pais))
brecha_pais_2019$pais <- sub("^[0-9]+\\.\\s*[A-Z]{2}-", "", brecha_pais_2019$pais)

brecha_pais <- brecha_pais_2019 %>%
    mutate(pais = factor(pais, levels = .$pais))

```

### Cleveland 2019

```{r cleveland-2019}
ggplot(brecha_pais) +
  theme_bw() +
  geom_line(aes(x = brecha_perc_2019, y = pais, group = pais), color = "black", size = 0.5) +
  geom_line(aes(x = brecha_just_2019, y = pais, group = pais), color = "black", size = 0.5) +
  geom_point(aes(x = brecha_perc_2019, y = pais, fill = "Perceived gap"), shape = 21, size = 3, color = "black") +
  geom_point(aes(x = brecha_just_2019, y = pais, fill = "Fair gap"), shape = 21, size = 3, color = "black") +
  xlab("Average gap") +
  ylab("Country") +
  xlim(0, 35) +
  scale_fill_manual(name = "Gap", 
                    values = c("Perceived gap" = "black", "Fair gap" = "white"),
                    breaks = c("Perceived gap", "Fair gap")) + 
  theme(axis.text.y = element_text(color = c(rep("gray30", 26), "black", rep("gray30", 2)),
                                 face = c(rep("plain", 26), "bold", rep("plain", 2))),
        legend.position = "right")

```

## Descripcion variables

Perception of economic inequality: The main independent variable refers to the perception of economic inequality, measured through the perceived wage gap (Jasso, 1980; Castillo, 2009; Hadler, 2005). This measure is derived from the salary gap between the perceived salaries of jobs at opposite ends of the occupational hierarchy. Specifically, it relies on the division between the perceived salary of a large-company president and that of an unskilled worker (Castillo, 2011). Higher values of this term indicate a greater perception of economic inequality between occupations located at the extremes of the status continuum. This measure includes a logarithmic term to adjust income magnitudes (usually fewer cases with high income):

$$
\text{perceived wage gap} = \log_{10}\left(\frac{\text{perceived salary of a large-company president}}{\text{perceived salary of an unskilled worker}}\right)
$$

Justification of economic inequality: This construct is measured as the just earnings gap, an approach to measuring the justification of economic inequality based on earning differences considered just between high and low status occupations (Castillo, 2012). Similarly to economic inequality perception, this indicator relies on the logarithmic ratio between the just salary of a large-company president and that of an unskilled worker. Higher values of this term indicate a greater justification of economic inequality.

Jasso, G. (1980). A New Theory of Distributive Justice. American Sociological Review, 45(1), 3. https://doi.org/10.2307/2095239

Castillo, J. C. (2009). ¿Cuál es la Brecha Salarial Justa? Opinión Pública y Legitimación de la Desigualdad Económica en Chile. Estudios Públicos, 113, 237-266.

Castillo, J. C. (2011). Legitimacy of Inequality in a Highly Unequal Context: Evidence from the Chilean Case. Social Justice Research, 24(4), 314-340. https://doi.org/10.1007/s11211-011-0144-5

Castillo, J. C. (2012). La legitimidad de las desigualdades salariales. Una aproximación multidimensional. Revista Internacional de Sociología, 70(3), 533-560. https://doi.org/10.3989/ris.2010.11.22

Hadler, M. (2005). Why Do People Accept Different Income Ratios?: A Multi-level Comparison of Thirty Countries. Acta Sociologica, 48(2), 131-154. https://doi.org/10.1177/0001699305053768


## Ejemplificación en dólares

Para ilustrar esta relación, la Figura 4 muestra el efecto marginal promedio de la ubicación de clase sobre la brecha salarial justa. Esta figura muestra, por ejemplo, que un trabajador autónomo informal y un trabajador no directivo creen que una brecha salarial justa debería ser de log (1,8) y log (1,9), equivalentes a USD$1890$ y USD$3660$, respectivamente. Por otro lado, un directivo experto considera que una brecha salarial justa debería ser de log (2,2), equivalente a USD$5600$. Esta diferencia es estadísticamente significativa (valor p < 0,001) y en la dirección hipotética, lo que indica que H1 debería aceptarse.
